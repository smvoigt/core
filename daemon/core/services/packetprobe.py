import os

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class PacketProbeService(CoreService):

    # a unique name is required, without spaces
    _name = "PacketProbe"
    # you can create your own group here
    _group = "Probe"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('packetprobeservice.sh','getserverip.py', )
    # this controls the starting order vs other enabled services
    _startindex = 50
    # list of startup commands, also may be generated during startup
    _startup = ('bash packetprobeservice.sh',)
    # list of shutdown commands
    _shutdown = ()

    @classmethod
    def generateconfig(cls, node, filename, services):
        cfg = ''
        if filename == 'getserverip.py':
            cfg = "import ipaddress\n"
            cfg += "import sys\n"
            cfg += "\n"
            cfg += "a = ipaddress.ip_network(sys.argv[1], strict=False)\n"
            cfg += "b = None\n"
            cfg += "for b in a.hosts():\n"
            cfg += "    pass\n"
            cfg += "print(str(b))\n"
        elif filename == 'packetprobeservice.sh':
            cfg = "#!/bin/bash\n"
            cfg += "# auto-generated by PacketProbeService (packetprobe.py)\n"

            cfg += "IPADDR=`ip addr | grep ctrl0 | sed -n 2p | tr -s ' ' | cut -d ' ' -f 3`\n"
            cfg += "export PROBESERVERIP=`python3 getserverip.py $IPADDR`\n"
            for ifc in node.netifs():
                if not ifc.name.startswith("ctrl"):
                    cfg += "probe_pkt --serverip $PROBESERVERIP --serverport 1969 --probename $HOSTNAME --interface "
                    cfg += ifc.name
                    cfg += " &\n"
        return cfg

# this line is required to add the above class to the list of available services
addservice(PacketProbeService)

